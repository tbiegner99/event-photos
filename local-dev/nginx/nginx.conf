user nginx;
worker_processes auto;


error_log  /var/log/nginx/error.log debug;
pid        /var/run/nginx.pid;

worker_rlimit_nofile 50000;

events {
  worker_connections  5000;
  use epoll;
  multi_accept on;
}

stream {
  upstream socket_connection {
    server event-photos:5000;
  }

  server {
    listen 5000;
    resolver 127.0.0.11;
    proxy_pass socket_connection;
  }
}
http {
  include       /etc/nginx/mime.types;
  
  log_format main '$remote_addr - $remote_user [$time_local] "$status" '
    '$request $body_bytes_sent "$http_referer" '
    '"$http_user_agent" "$http_x_forwarded_for" '
    '"$sent_http_x_trace_id" "$sent_http_x_from_span_id" '
    '"$proxy_host" "$upstream_addr"';

  # Sendfile copies data between one FD and other from within the kernel.
  # More efficient than read() + write(), since the requires transferring data to and from the user space.
  sendfile on;

  # Tcp_nopush causes nginx to attempt to send its HTTP response head in one packet,
  # instead of using partial frames. This is useful for prepending headers before calling sendfile,
  # or for throughput optimization.
  tcp_nopush on;

  # Disable Nagle algorithm.
  tcp_nodelay on;

  # Timeout for keep-alive connections. Server will close connections after this time.
  client_body_timeout 15;
  client_header_timeout 15;
  keepalive_timeout 30;
  send_timeout 15;

  # Buffers
  client_body_buffer_size 512m;
  client_header_buffer_size 512m;
  client_max_body_size 250M;
  large_client_header_buffers 2 512m;

  # File descriptor
  open_file_cache max=5000 inactive=20s;
  open_file_cache_valid 30s;
  open_file_cache_min_uses 2;
  open_file_cache_errors on;

  # Remove nginx header
  server_tokens off;

  # We don't like chunked as it don't always play nice with gzip
  chunked_transfer_encoding off;

  underscores_in_headers on;
  if_modified_since off;
  etag off;
  gzip on;
  charset UTF-8;

  # Proxy settings
  proxy_http_version 1.1;
  proxy_set_header Connection "";
  proxy_set_header X-Real-IP $remote_addr;
  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
  proxy_intercept_errors on;
  proxy_set_header Host $calculated_host;
  proxy_set_header Connection $connection_upgrade;
  proxy_set_header Upgrade $http_upgrade;
  proxy_buffering on;

  # Buffers
  proxy_buffers 8 512k;
  proxy_buffer_size 512k;
  proxy_busy_buffers_size 512k;
  proxy_temp_path /tmp;

  map $http_upgrade $connection_upgrade {
    default 'upgrade';
    ''      'Keep-Alive';
  }

  map $http_x_partition_by $x_partition_by {
    default $http_x_partition_by;
    ''      'default';
  }

  map $host $calculated_host {
    default $host;
    ''      'health_check_host';
  }

  map $http_x_forwarded_proto $thescheme {
     default $scheme;
     https https;
  } 
 server {
        # listen 80;  
        listen 443 ssl;
        # listen [::]:80;
        server_name 72.89.85.134 127.0.0.1 router localhost tjs-mac-mini tjs-mac-mini.local tjs-mac-mini.home;
        ssl_certificate /srv/certs/cert.crt;
        ssl_certificate_key /srv/certs/cert.key;
        resolver 127.0.0.11;

          

             location / {
                set $upstream host.docker.internal:8000;
                proxy_pass http://$upstream;
             }
            
              location ~ ^/api/([^/]+)/(.*) { 
                set $upstream $1;
                proxy_pass http://$upstream:8080;
              }

             
    }
    server {
        listen 80;  
        #listen 443 ssl;
        # listen [::]:80;
        server_name 72.89.85.134 127.0.0.1 router localhost tjs-mac-mini tjs-mac-mini.local tjs-mac-mini.home;
        #ssl_certificate /srv/certs/cert.crt;
        #ssl_certificate_key /srv/certs/cert.key;
        resolver 127.0.0.11;

          

             location / {
                set $upstream host.docker.internal:8000;
                proxy_pass http://$upstream;
             }
              location /socket.io/ {
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header Host $host;
                set $upstream event-photos:8080;
                proxy_pass http://$upstream;

                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection "upgrade";
              }
              location ~ ^/api/([^/]+)/(.*) { 
                set $upstream $1;
                proxy_pass http://$upstream:8080;
              }

             
    }
  }